/*

Generated by using code-generator

*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/nghialv/lotus/pkg/app/lotus/apis/lotus/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LotusLister helps list Lotuses.
type LotusLister interface {
	// List lists all Lotuses in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.Lotus, err error)
	// Lotuses returns an object that can list and get Lotuses.
	Lotuses(namespace string) LotusNamespaceLister
	LotusListerExpansion
}

// lotusLister implements the LotusLister interface.
type lotusLister struct {
	indexer cache.Indexer
}

// NewLotusLister returns a new LotusLister.
func NewLotusLister(indexer cache.Indexer) LotusLister {
	return &lotusLister{indexer: indexer}
}

// List lists all Lotuses in the indexer.
func (s *lotusLister) List(selector labels.Selector) (ret []*v1beta1.Lotus, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Lotus))
	})
	return ret, err
}

// Lotuses returns an object that can list and get Lotuses.
func (s *lotusLister) Lotuses(namespace string) LotusNamespaceLister {
	return lotusNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LotusNamespaceLister helps list and get Lotuses.
type LotusNamespaceLister interface {
	// List lists all Lotuses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.Lotus, err error)
	// Get retrieves the Lotus from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.Lotus, error)
	LotusNamespaceListerExpansion
}

// lotusNamespaceLister implements the LotusNamespaceLister
// interface.
type lotusNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Lotuses in the indexer for a given namespace.
func (s lotusNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.Lotus, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Lotus))
	})
	return ret, err
}

// Get retrieves the Lotus from the indexer for a given namespace and name.
func (s lotusNamespaceLister) Get(name string) (*v1beta1.Lotus, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("lotus"), name)
	}
	return obj.(*v1beta1.Lotus), nil
}
